{"version":3,"sources":["pages/Login/index.js","pages/Dashboard/component/sidebar.js","pages/Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["Login","history","useHistory","className","type","placeholder","onClick","push","sidebar","name","size","round","iconShape","icon","faGem","faBoxOpen","title","faUserAlt","faSignInAlt","to","Dashboard","App","render","location","TransitionGroup","CSSTransition","key","classNames","timeout","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TA2CeA,MAvCf,WACI,IAAMC,EAAUC,cAChB,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,cACX,8BACI,uCAEA,yBAAKA,UAAU,cACX,2CACA,2BACIC,KAAK,OACLD,UAAU,eACVE,YAAY,oBAIpB,yBAAKF,UAAU,cACX,2CACA,2BACIC,KAAK,WACLD,UAAU,eACVE,YAAY,oBAIpB,4BACID,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAML,EAAQM,KAAK,gBAHhC,c,0DC6BLC,MAnCf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,yBAAKL,UAAU,OACX,kBAAC,IAAD,CAAQM,KAAK,gBAAgBC,KAAK,KAAKC,OAAO,IAC9C,wBAAIR,UAAU,4BAAd,mBAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMS,UAAU,UACZ,kBAAC,IAAD,CAAUC,KAAM,kBAAC,IAAD,CAAiBA,KAAMC,OAAvC,aAGA,kBAAC,IAAD,CAAUD,KAAM,kBAAC,IAAD,CAAiBA,KAAME,OAAvC,YAGA,kBAAC,IAAD,CACIC,MAAM,YACNH,KAAM,kBAAC,IAAD,CAAiBA,KAAMI,OAE7B,kBAAC,IAAD,cACA,kBAAC,IAAD,gBACA,kBAAC,IAAD,eAEJ,kBAAC,IAAD,CAAUJ,KAAM,kBAAC,IAAD,CAAiBA,KAAMK,OAAvC,UACW,kBAAC,IAAD,CAAMC,GAAG,cAI5B,kBAAC,IAAD,YC3CGC,MARf,WACI,OACI,yBAAKjB,UAAU,SACX,kBAAC,EAAD,Q,kBCsCGkB,MA9Bf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,IAAKH,EAASG,IACdC,WAAW,OACXC,QAAS,KAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,IAAD,CAAUX,GAAG,YAEjB,kBAAC,IAAD,CAAOW,KAAK,UACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,cACR,kBAAC,EAAD,eCrBhBC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASb,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2ef8488.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./index.css\";\n\nfunction Login() {\n    const history = useHistory();\n    return (\n        <div className=\"auth-wrapper\">\n            <div className=\"auth-inner\">\n                <form>\n                    <h3>Sign In</h3>\n\n                    <div className=\"form-group\">\n                        <label>Username</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Enter username\"\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Password</label>\n                        <input\n                            type=\"password\"\n                            className=\"form-control\"\n                            placeholder=\"Enter password\"\n                        />\n                    </div>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary btn-block\"\n                        onClick={() => history.push(\"/dashboard\")}\n                    >\n                        Submit\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default Login;\n","import React from \"react\";\nimport {\n    ProSidebar,\n    Menu,\n    MenuItem,\n    SubMenu,\n    SidebarHeader,\n    SidebarContent,\n    SidebarFooter,\n} from \"react-pro-sidebar\";\nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport {\n    faBoxOpen,\n    faGem,\n    faHeart,\n    faSignInAlt,\n    faUserAlt,\n    faUserAltSlash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Avatar from \"react-avatar\";\nimport \"./sidebar.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction sidebar() {\n    return (\n        <ProSidebar>\n            <SidebarHeader>\n                <div className=\"p-4\">\n                    <Avatar name=\"Fikri Mustofa\" size=\"50\" round={true} />\n                    <h4 className=\"d-inline-block mb-0 ml-2\">Fikri Mustofa</h4>\n                </div>\n            </SidebarHeader>\n            <SidebarContent>\n                <Menu iconShape=\"circle\">\n                    <MenuItem icon={<FontAwesomeIcon icon={faGem} />}>\n                        Dashboard\n                    </MenuItem>\n                    <MenuItem icon={<FontAwesomeIcon icon={faBoxOpen} />}>\n                        Products\n                    </MenuItem>\n                    <SubMenu\n                        title=\"Pelanggan\"\n                        icon={<FontAwesomeIcon icon={faUserAlt} />}\n                    >\n                        <MenuItem>Aktif</MenuItem>\n                        <MenuItem>Selesai</MenuItem>\n                        <MenuItem>Semua</MenuItem>\n                    </SubMenu>\n                    <MenuItem icon={<FontAwesomeIcon icon={faSignInAlt} />}>\n                        Logout <Link to=\"/login\" />\n                    </MenuItem>\n                </Menu>\n            </SidebarContent>\n            <SidebarFooter>f</SidebarFooter>\n        </ProSidebar>\n    );\n}\n\nexport default sidebar;\n","import React from \"react\";\nimport Sidebar from \"./component/sidebar\";\n\nfunction Dashboard() {\n    return (\n        <div className=\"mh100\">\n            <Sidebar />\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport {\n    BrowserRouter,\n    Redirect,\n    Route,\n    Switch,\n    useLocation,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./pages/Login\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Dashboard from \"./pages/Dashboard\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Route\n                render={({ location }) => (\n                    <TransitionGroup>\n                        <CSSTransition\n                            key={location.key}\n                            classNames=\"fade\"\n                            timeout={300}\n                        >\n                            <Switch>\n                                <Route exact path=\"/\">\n                                    <Redirect to=\"/login\" />\n                                </Route>\n                                <Route path=\"/login\">\n                                    <Login />\n                                </Route>\n                                <Route path=\"/dashboard\">\n                                    <Dashboard />\n                                </Route>\n                            </Switch>\n                        </CSSTransition>\n                    </TransitionGroup>\n                )}\n            />\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}